package com.hommy.administrator.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.hommy.administrator.dao.interfaces.IRule;
import com.hommy.administrator.dao.objects.Action;
import com.hommy.administrator.dao.objects.Device;
import com.hommy.administrator.dao.objects.Devices;
import com.hommy.administrator.dao.objects.Event;
import com.hommy.administrator.dao.objects.Rule;
import com.hommy.administrator.dao.objects.Rules;
import com.hommy.database.DatabaseConnection;

public class RulesOperation implements IRule {

	static {
		DatabaseConnection.initialize();
	}

	@Override
	public Rules getAllRules() {
		Connection connection = DatabaseConnection.createConnection();
		List<Rule> rules = new ArrayList<Rule>();
		Rules rulesManage = new Rules();

		String query = "select * from rules";

		Statement statement;
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery(query);
			System.out.println("All rules: ");

			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String name = resultSet.getString("rulename");
				int eventId = resultSet.getInt("eventId");
				int deviceId = resultSet.getInt("deviceId");
				int actionId = resultSet.getInt("actionId");
				int executionOrder = resultSet.getInt("executionOrder");

				System.out.println("Rule: " + id + "  " + name);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		rulesManage.setRules(rules);
		return rulesManage;
	}

	public void getRuleForUserAndDevice(int userId, int DeviceId) {
		Connection connection = DatabaseConnection.createConnection();
		Rules rulesManage = new Rules();

		String query = "select * from rules where userId=? and deviceId=?";

		Statement statement;
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String name = resultSet.getString("rulename");
				int eventId = resultSet.getInt("eventId");
				int deviceId = resultSet.getInt("deviceId");
				int actionId = resultSet.getInt("actionId");
				int executionOrder = resultSet.getInt("executionOrder");

				System.out.println("Rule: " + id + "  " + name + "   " + deviceId + "  " + actionId);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public Rule getRuleByName(String name) {
		Connection connection = DatabaseConnection.createConnection();
		Devices devices = new Devices();
		Rule rule = new Rule();

		String query = "select * from rules where rulename=?";

		PreparedStatement preparedStatement;
		try {
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.setString(1, name);

			ResultSet resultSet = preparedStatement.executeQuery();

			boolean isFirstIteration = true;

			List<Integer> actionsId = new ArrayList<Integer>();

			while (resultSet.next()) {
				if (isFirstIteration) {
					int id = resultSet.getInt("id");
					String rulename = resultSet.getString("rulename");
					int eventId = resultSet.getInt("eventId");
					rule.setId(id);
					rule.setName(rulename);

					Event event = new EventsOperation().getEvent(connection, eventId);
					rule.setEvent(event);
				}

				int deviceId = resultSet.getInt("deviceId");
				int actionId = resultSet.getInt("actionId");

				devices.addDevice(new Device(deviceId));
				actionsId.add(actionId);
			}
			rule.setDevices(devices);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rule;
	}

	public Rules getRulesNameForUser(int userId) {
		Connection connection = DatabaseConnection.createConnection();
		Rules rulesManage = new Rules();

		String query = "select UNIQUE ruleName from rules where userId=?";

		PreparedStatement preparedStatement;
		try {
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.setInt(1, userId);

			ResultSet resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				String name = resultSet.getString("rulename");

				System.out.println("Rule:  " + name);

				rulesManage.addRule(new Rule(name));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return rulesManage;
	}

	@Override
	public Rule getRule(Rule rule) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean addRule(Rule rule) {
		Connection connection = DatabaseConnection.createConnection();

		String ruleName = rule.getEvent().getId();
		int userId = rule.getUser().getId();
		int eventId = rule.getEvent().getId();
		
		for (Device device : rule.getDevices().getDevices()) {
			int deviceId = device.getId();
			
			for(Action action : device.getActions()) {
				int actionId = action.getId();
				addRuleDeviceActions(connection, userId, eventId, deviceId,actionId,1);
			}
			
		}
		
		
		
		
		addRuleDeviceActions(connection, userId, eventId);
		
			preparedStatement.setInt(1, rule.getUser().getId());
			preparedStatement.setInt(2, rule.getEvent().getId());
			preparedStatement.setInt(1, rule.getDevices()());
			preparedStatement.setInt(2, rule.getDescription());
			preparedStatement.setString(1, rule.getName());
			preparedStatement.setString(2, rule.getDescription());
			result = preparedStatement.executeUpdate();


	}

	public boolean addRuleDeviceActions(Connection connection, int userId, int eventId, int deviceId, int actionId,
			String ruleName, int executionOrder) {

		String insertSQL = "INSERT INTO RULES(USERID, EVENTID, DEVICEID, ACTIONID, RULENAME, EXECUTIONORDER) VALUES (?, ?, ?, ?, ?, ?)";
		int result = 0;

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(insertSQL);

			preparedStatement.setInt(1, userId);
			preparedStatement.setInt(2, eventId);
			preparedStatement.setInt(3, deviceId);
			preparedStatement.setInt(4, actionId);
			preparedStatement.setString(5, ruleName);
			preparedStatement.setInt(6, executionOrder);

			result = preparedStatement.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		if (result == 1) {
			return true;
		}
		return false;
	}

	@Override
	public void removeRule(Rule rule) {
		// TODO Auto-generated method stub

	}

}
